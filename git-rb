#!/bin/sh

SUBDIRECTORY_OK=Yes
OPTIONS_KEEPDASHDASH=
OPTIONS_STUCKLONG=t
OPTIONS_SPEC="\
git rb [options]
--
 Available options are
v,verbose!         print more information
dry-run!           only simulate, don't actually rebase
 Actions:
continue!          continue
abort!             abort
skip!              do \`git rebase --skip\` and continue
"

. git-sh-setup
require_work_tree_exists
cd_to_toplevel

state_dir="$GIT_DIR"/rebase-many

#
# Parse args
#

action=
dry_run=
verbose=

total_argc=$#
while test $# != 0
do
	case "$1" in
	--continue|--abort|--skip)
		test $total_argc -eq 2 || usage
		action=${1#--}
		;;
	--dry-run)
		dry_run=t
		;;
	--verbose)
		verbose=t
		GIT_QUIET=
		;;
	--)
		shift
		break
		;;
	esac
	shift
done
test $# -le 0 || usage

in_progress=
if test -d "$state_dir"
then
	in_progress=t
fi

# TODO detect non-many rebase too

if test -n "$action" && test -z "$in_progress"
then
	die "No rebase-many in progress?"
fi

if test -z "$action" && test -n "$in_progress"
then
	die "\
Rebase-many in progress; try abort/continue, or wipe the state dir.

TODO better message."
fi

#
# Main work
#

get_upstream () {
	git rev-parse --abbrev-ref "$1"@{u}
}

write_basic_state () {
	mkdir -p "$state_dir"
	echo "$branch" > "$state_dir"/branch
	echo "$(get_upstream "$branch")" > "$state_dir"/upstream
	echo "$verbose" > "$state_dir"/verbose
	echo "$dry_run" > "$state_dir"/dry-run
}

cleanup_basic_state () {
	rm -rf "$state_dir"
}

run_core () {
	GIT_DIR="$GIT_DIR" git rb-core "$1"
	core_status=$?
	if test "$core_status" -ne 0
	then
		exit "$core_status"
	fi
}

#
# Handle in-progress rebase, and abort/continue/etc
#

case "$action" in
continue)
	run_core continue
	cleanup_basic_state
	;;
skip)
	run_core skip
	cleanup_basic_state
	;;
abort)
	run_core abort
	cleanup_basic_state
	;;
esac

#
# Handle initial case
#

require_clean_work_tree "rebase-many" "$(gettext "Please commit or stash them.")"

head_ref=$(git symbolic-ref -q HEAD)
if test -z "$head_ref"
then
	die "\
You are on a detached HEAD.
Check out the branch you want to rebase."
fi
branch=${head_ref#refs/heads/}
if test "$branch" = "$head_ref"
then
	die "\
HEAD is not under refs/heads/: $head_ref

The 'upstream' feature of Git only operates on refs/heads/.
"
fi

write_basic_state

run_core init

cleanup_basic_state


# These follow the style in Git upstream.
#
# Local Variables:
# sh-indentation: 8
# sh-basic-offset: 8
# sh-indent-for-case-label: 0
# sh-indent-for-case-alt: +
# indent-tabs-mode: t
# End:
